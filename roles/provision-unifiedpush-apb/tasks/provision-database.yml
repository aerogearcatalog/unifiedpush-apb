- name: generate password
  shell: head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo ''
  register: gen_password

- k8s_v1_secret:
    name: '{{ postgres_secret_name }}'
    namespace: '{{ namespace }}'
    annotations:
      template.openshift.io/expose-username: "{.data['database-user']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-database_name: "{.data['database-name']}"
    string_data:
      database-user: 'unifiedpush'
      database-password: '{{ gen_password.stdout }}'
      database-name: "{{ postgres_database_name }}"

- k8s_v1_service:
    name: '{{ postgres_service_name }}'
    namespace: '{{ namespace }}'
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      target_port: 5432
      node_port: 0
    selector:
      name: '{{ postgres_service_name }}'
    spec_type: ClusterIP
    session_affinity: None

- k8s_v1_persistent_volume_claim:
    name: '{{ postgres_pvc_name }}'
    namespace: '{{ namespace }}'
    access_modes:
    - ReadWriteOnce
    resources_requests:
      storage: "1Gi"

- openshift_v1_deployment_config:
    name: '{{ postgres_deploymentconfig_name }}'
    namespace: '{{ namespace }}'
    replicas: 1
    labels:
      app: '{{ ups_deploymentconfig_name }}'
      service: '{{ postgres_service_name }}'
    spec_template_metadata_labels:
      app: '{{ ups_deploymentconfig_name }}'
      name: '{{ postgres_service_name }}'
    containers:
    - name: postgresql
      image: '{{ postgres_image }}'
      ports:
      - container_port: 5432
        protocol: TCP
      readiness_probe:
        timeout_seconds: 1
        initial_delay_seconds: 5
        exec:
          command:
          - "/bin/sh"
          - "-i"
          - "-c"
          - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
            'SELECT 1'
      liveness_probe:
        timeout_seconds: 1
        initial_delay_seconds: 30
        tcp_socket:
          port: 5432
      env:
      - name: POSTGRESQL_USER
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-user
      - name: POSTGRESQL_PASSWORD
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-password
      - name: POSTGRESQL_DATABASE
        valueFrom:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-name
      resources:
        limits:
          memory: '512Mi'
      volume_mounts:
      - name: '{{ postgres_pvc_name }}-data'
        mount_path: "/var/lib/pgsql/data"
      termination_message_path: "/dev/termination-log"
    volumes:
    - name: '{{ postgres_pvc_name }}-data'
      persistent_volume_claim:
        claim_name: '{{ postgres_pvc_name }}'


# Check the containers in the Postgres pod and make sure they are all ready
- name: "Wait for all Postgres containers to become ready"
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig={{ postgres_deploymentconfig_name }}" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: postgresql_result
  until: postgresql_result.stdout.find("1") != -1
  retries: 30
  delay: 5
