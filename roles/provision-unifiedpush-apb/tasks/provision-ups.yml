- name: UPS deployment
  openshift_v1_deployment_config:
    name: '{{ ups_deploymentconfig_name }}'
    namespace: "{{ namespace }}"
    labels:
      app: ups
      service: ups
      name: ups
      mobile: enabled
    replicas: 1
    selector:
      app: ups
      service: ups
    spec_template_metadata_labels:
      app: ups
      service: ups
    spec_template_spec_service_account_name: '{{ proxy_serviceaccount_name }}'
    spec_template_spec_init_containers:
    - name: wait-for-postgresql
      image: '{{ postgres_image }}'
      imagePullPolicy: Always
      env:
        - name: POSTGRES_SERVICE_HOST
          value: "{{ postgres_service_name }}"
      command:
        - "/bin/sh"
        - "-c"
        - "source /opt/rh/rh-postgresql96/enable && until pg_isready -h $POSTGRES_SERVICE_HOST; do echo waiting for database; sleep 2; done;"
    containers:
    - name: ups
      image: '{{ ups_image }}'
      imagePullPolicy: Always
      env:
      - name: POSTGRES_USER
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-user
      - name: POSTGRES_PASSWORD
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-password
      - name: POSTGRES_DATABASE
        value_from:
          secret_key_ref:
            name: '{{ postgres_secret_name }}'
            key: database-name
      - name: POSTGRES_SERVICE_HOST
        value: "{{ postgres_service_name }}"
      - name: POSTGRES_SERVICE_PORT
        value: "5432"
      ports:
      - name: ups
        protocol: TCP
        container_port: 8080
      readinessProbe:
        httpGet:
          path: '/rest/applications'
          port: 8080
        initialDelaySeconds: 15
        timeoutSeconds: 2
      livenessProbe:
        httpGet:
          path: '/rest/applications'
          port: 8080
        initialDelaySeconds: 60
        timeoutSeconds: 2
    - name: ups-oauth-proxy
      image: '{{ proxy_image }}'
      imagePullPolicy: Always
      ports:
      - containerPort: '{{ ups_proxy_port }}'
        name: public
      args:
      - --provider=openshift
      - --openshift-service-account={{ proxy_serviceaccount_name }}
      - --upstream=http://localhost:{{ ups_port }}
      - >-
        --openshift-sar={"namespace":"{{ namespace }}","resource":"deploymentconfigs","name":"ups","verb":"update"}
      - --http-address=0.0.0.0:{{ ups_proxy_port }}
      - --skip-auth-regex=/rest/sender,/rest/registry/device,/rest/prometheus/metrics,/rest/auth/config
      - --https-address=
      - --cookie-secret=SECRET
    - name: ups-sync-service
      image: '{{ ups_sidecar_image }}'
      imagePullPolicy: Always
      env:
      - name: NAMESPACE
        value: "{{ namespace }}"

- name: create UPS service
  k8s_v1_service:
    name: '{{ ups_service_name }}'
    namespace: '{{ namespace }}'
    annotations:
      org.aerogear.metrics/plain_endpoint: "/rest/prometheus/metrics"
    labels:
      app: ups
      service: ups
      mobile: enabled
    selector:
      app: ups
      service: ups
    ports:
      - name: web
        port: 80
        target_port: 8080
  register: unifiedpush_service

- name: create UPS Proxy
  k8s_v1_service:
    name: '{{ ups_proxy_service_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: ups
      service: ups-proxy
    selector:
      app: ups
      service: ups
    ports:
      - name: web
        port: 80
        target_port: '{{ ups_proxy_port }}'

- name: create ups https route
  openshift_v1_route:
    name: '{{ ups_route_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: ups
      service: ups-proxy
    to_name: ups-proxy
    spec_port_target_port: web
    spec_tls_termination: edge
  register: ups_route

# We need to wait for the deployment to be ready before we can exit the ansible job
- name: "Wait for all UPS containers to become ready"
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig={{ ups_deploymentconfig_name }}" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: ups_result
  until: ups_result.stdout.find("3") != -1
  retries: 30
  delay: 5

- name: "Create {{ namespace }} PushApplication on service host {{ unifiedpush_service.service.spec.cluster_ip }}"
  uri:
    url: "http://{{ unifiedpush_service.service.spec.cluster_ip }}/rest/applications"
    method: POST
    body: '{"name" : "{{ namespace }}", "description" :  "Push application for {{ namespace }}"}'
    validate_certs: no
    body_format: json
    status_code: 201
  register: namespace_push_app

# This is currently needed until https://github.com/openshift/ansible-service-broker/issues/847 is resolved
- name: Make the data available to be used in the binding
  asb_encode_binding:
    fields:
      NAMESPACE: "{{ namespace }}"

- name: "Create ups secret yaml file"
  template:
    src: secret.yml.j2
    dest: /tmp/secret.yaml

- name: "Create UPS secret"
  shell: "oc create -f /tmp/secret.yaml -n {{ namespace }}"

- name: "Delete UPS Secret Template File"
  file: path=/tmp/secret.yaml state=absent
