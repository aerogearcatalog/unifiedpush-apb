# Store the name of the service instance. It's required for some purposes like adding
# annotations to the mobile client

- name: "Get the name of the service instance"
  shell: oc get serviceinstance --namespace={{ namespace }} -o jsonpath='{.items[?(@.spec.externalID=="{{ _apb_service_instance_id }}")].metadata.name}'
  register: serviceinstance_name

- name: "Ensure compatibility with older ASB versions"
  set_fact:
    _apb_service_binding_id: "DUMMY"
  when: _apb_service_binding_id is not defined

- name: Generate client id
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_client_id

- set_fact:
    UPS_NAME: "{{ serviceinstance_name.stdout }}"
    GENERATED_CLIENT_ID: "{{ generated_client_id.stdout }}"

# The check has passed, no variant for this type seems to exist. Continue with
# the binding secrets

- name: "Create ups secret yaml file"
  template:
    src: binding_secret_droid.yml.j2
    dest: /tmp/secret.yaml
  when: CLIENT_TYPE == "Android"

- name: "Create ups secret yaml file"
  template:
    src: binding_secret_ios.yml.j2
    dest: /tmp/secret.yaml
  when: CLIENT_TYPE == "IOS"

- name: "Create binding secret"
  shell: "oc create -f /tmp/secret.yaml -n {{ namespace }}"

- name: "Delete binding Secret Template File"
  file: path=/tmp/secret.yaml state=absent

# Annotate the mobile client
- name: Get ups service instance name
  shell: oc get serviceinstances -n {{ namespace }} -o json | jq '.items[] | select(.spec.externalID=="{{ _apb_service_instance_id }}") | .metadata.name'  | cut -f2 -d'"'
  register: ups_si_name

- set_fact:
    upsInstanceName: "{{ ups_si_name.stdout }}"

- set_fact:
    upsUrlAnnotation: "org.aerogear.binding.{{ upsInstanceName }}/ups_url"
 
- name: Annotate client {{ CLIENT_ID }}
  shell: 'oc annotate mobileclient {{ CLIENT_ID }} {{ item }} --overwrite=true -n {{ namespace }}'
  ignore_errors: yes
  with_items:
    - "{{ upsUrlAnnotation }}='{\"label\": \"UPS Admin Console URL\", \"value\": \"{{ _apb_provision_creds.upsConsoleUrl }}\", \"type\": \"href\"}'"

- name: Store the Android name of the binding secret to be used in unbind
  asb_encode_binding:
    fields:
      namespace: "{{ namespace }}"
      googleKey: "{{ googlekey }}"
      appType: "{{ CLIENT_TYPE }}"
      clientId: "{{ CLIENT_ID }}"
      upsInstanceName: "{{ upsInstanceName }}"
  when: CLIENT_TYPE == "Android" and APB_TEST is not defined

- name: Store the iOS name of the binding secret to be used in unbind
  asb_encode_binding:
    fields:
      namespace: "{{ namespace }}"
      cert: "{{ cert }}"
      appType: "{{ CLIENT_TYPE }}"
      clientId: "{{ CLIENT_ID }}"
      isProduction: "{{ iosIsProduction }}"
      upsInstanceName: "{{ upsInstanceName }}"
  when: CLIENT_TYPE == "IOS" and APB_TEST is not defined

- name: Populate {{ CLIENT_ID }} APB bind credentials
  set_fact:
    _apb_bind_creds: "{{ _apb_bind_creds|default({}) | combine( {item.name: item.value} ) }}"
  with_items:
    - { name: clientId, value: '{{ CLIENT_ID }}' }
    - { name: upsInstanceName, value: '{{ upsInstanceName }}' }
  when: not encode_asb_binding
  no_log: yes
